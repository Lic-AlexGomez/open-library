{
  "version": 3,
  "sources": [
    "components/Row.js",
    "components/Rows.js",
    "components/Heading.js",
    "components/Headings.js",
    "reportWebVitals.js",
    "index.js"
  ],
  "names": [
    "Row",
    "Component",
    "render",
    "React",
    "createElement",
    "this",
    "props",
    "change",
    "when",
    "who",
    "description",
    "Rows",
    "data",
    "map",
    "row",
    "id",
    "key",
    "Heading",
    "heading",
    "Headings",
    "className",
    "headings",
    "App",
    "constructor",
    "super",
    "arguments",
    "state",
    "componentDidMount",
    "setInterval",
    "async",
    "url",
    "concat",
    "response",
    "fetch",
    "data_json",
    "json",
    "formatData",
    "setState",
    "getFormatDate",
    "date",
    "today",
    "Date",
    "date_year",
    "substring",
    "date_month",
    "date_day",
    "date_hour",
    "date_minute",
    "date_second",
    "new_today",
    "getFullYear",
    "getMonth",
    "getDate",
    "getHours",
    "getMinutes",
    "getSeconds",
    "new_date",
    "Math",
    "abs",
    "timestamp",
    "author",
    "comment",
    "toUpperCase",
    "title",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "__webpack_require__",
    "e",
    "then",
    "bind",
    "_ref",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "StrictMode",
    "users",
    "document",
    "getElementById"
  ],
  "mappings": "8bAceA,MAZf,cAAkBC,YACdC,SACI,OACIC,IAAAC,cAAA,UACID,IAAAC,cAAA,UAAKC,KAAKC,MAAMC,OAAOC,MACvBL,IAAAC,cAAA,UAAKC,KAAKC,MAAMC,OAAOE,KACvBN,IAAAC,cAAA,UAAKC,KAAKC,MAAMC,OAAOG,gBCSxBC,MAdf,cAAmBV,YACfC,SACI,OACIC,IAAAC,cAAA,aAEQC,KAAKC,MAAMM,KAAKC,IAAI,CAACC,EAAKC,IACfZ,IAAAC,cAACJ,EAAG,CAACgB,IAAKD,EAAIR,OAAQO,QCDtCG,MANf,cAAsBhB,YAClBC,SACI,OAAOC,IAAAC,cAAA,UAAKC,KAAKC,MAAMY,WCehBC,MAhBf,cAAuBlB,YACnBC,SACI,OACIC,IAAAC,cAAA,SAAOgB,UAAU,iBACbjB,IAAAC,cAAA,UAEQC,KAAKC,MAAMe,SAASR,IAAI,CAACK,EAASH,IAC3BZ,IAAAC,cAACa,EAAO,CAACD,IAAKD,EAAIG,QAASA,SCqD3CI,MA3Df,cAAkBrB,YAAUsB,cAAAC,SAAAC,WAAApB,KAE1BqB,MAAQ,CACNd,KAAO,IAGTe,oBACEC,YAAYC,UACV,MACMC,EAAG,mDAAAC,OADK,MAGRC,QAAiBC,MAAMH,GACvBI,QAAkBF,EAASG,OAE3BC,EAAa/B,KAAK+B,WAAWF,GACnC7B,KAAKgC,SAAS,CAAEzB,KAAMwB,KACrB,KAGLE,cAAcC,GACZ,IAAIC,EAAQ,IAAIC,KAEZC,EAAYH,EAAKI,UAAU,EAAG,GAC9BC,EAAaL,EAAKI,UAAU,EAAG,GAC/BE,EAAWN,EAAKI,UAAU,EAAG,IAC7BG,EAAYP,EAAKI,UAAU,GAAI,IAC/BI,EAAcR,EAAKI,UAAU,GAAI,IACjCK,EAAcT,EAAKI,UAAU,GAAI,IAEjCM,EAAY,IAAIR,KAAKD,EAAMU,cAAeV,EAAMW,WAAYX,EAAMY,UAAWZ,EAAMa,WAAYb,EAAMc,aAAcd,EAAMe,cACzHC,EAAW,IAAIf,KAAKC,EAAWE,EAAYC,EAAUC,EAAWC,EAAaC,GAGjF,OAFeS,KAAKC,IAAIT,EAAYO,GAAY,IAE/B,eAGnBpB,WAAWxB,GACT,OAAOA,EAAKC,IAAI,CAACD,EAAMG,KACd,CACLP,KAAQH,KAAKiC,cAAc1B,EAAK+C,WAChClD,IAAOG,EAAKgD,OAAO5C,IAAI2B,UAAU,GACjCjC,YAAeE,EAAKiD,QAAQC,iBAKlC5D,SACE,OACEC,IAAAC,cAAA,OAAKgB,UAAU,iBACbjB,IAAAC,cAAA,UAAKC,KAAKC,MAAMyD,OAChB5D,IAAAC,cAAA,SAAOgB,UAAU,wBACfjB,IAAAC,cAACe,EAAQ,CAACE,SAAUhB,KAAKC,MAAMe,WAC/BlB,IAAAC,cAACO,EAAI,CAACC,KAAMP,KAAKqB,MAAMd,WC5ClBoD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,aCDdY,IAAS3E,OACPC,IAAAC,cAACD,IAAM2E,WAAU,KACf3E,IAAAC,cAACkB,EAAG,CACFV,KAAMA,EACNmD,MAAM,kBACN1C,SAAU,CAAC,OAAQ,MAAO,eAC1B0D,MAAO,MAGXC,SAASC,eAAe,SAM1BjB",
  "file": "static/js/main.403bd330.chunk.js",
  "sourcesContent": [
    "import React, { Component } from 'react';\n\nclass Row extends Component {\n    render() {\n        return (\n            <tr>\n                <td>{this.props.change.when}</td>\n                <td>{this.props.change.who}</td>\n                <td>{this.props.change.description}</td>\n            </tr>\n        );\n    }\n}\n\nexport default Row;",
    "import React, { Component } from \"react\";\nimport Row from './Row';\n\nclass Rows extends Component {\n    render() {\n        return (\n            <tbody>\n                {\n                    this.props.data.map((row, id) => {\n                        return <Row key={id} change={row} />\n                    })\n                }\n            </tbody>\n        );\n    }\n}\n\nexport default Rows;",
    "import React, { Component } from 'react';\n\nclass Heading extends Component {\n    render() {\n        return <th>{this.props.heading}</th>\n    }\n}\n\nexport default Heading;",
    "import React, { Component } from 'react';\nimport Heading from './Heading';\n\nclass Headings extends Component {\n    render() {\n        return (\n            <thead className=\"table-success\">\n                <tr>\n                    {\n                        this.props.headings.map((heading, id) => {\n                        return <Heading key={id} heading={heading} />\n                        })\n                    }\n                </tr>\n            </thead>\n        );\n    }\n}\n\nexport default Headings;",
    "import React, { Component } from 'react';\nimport Rows from './components/Rows';\nimport Headings from './components/Headings';\n\nclass App extends Component {\n\n  state = {\n    data : []\n  }\n\n  componentDidMount() {\n    setInterval(async () => {\n      const users = '15';\n      const url = `http://openlibrary.org/recentchanges.json?limit=${users}`;\n\n      const response = await fetch(url);\n      const data_json = await response.json();\n\n      const formatData = this.formatData(data_json);\n      this.setState({ data: formatData });\n    }, 1000);\n  }\n\n  getFormatDate(date) {\n    var today = new Date();\n\n    var date_year = date.substring(0, 4);\n    var date_month = date.substring(5, 7);\n    var date_day = date.substring(8, 10);\n    var date_hour = date.substring(11, 13);\n    var date_minute = date.substring(14, 16);\n    var date_second = date.substring(17, 19);\n\n    var new_today = new Date(today.getFullYear(), today.getMonth(), today.getDate(), today.getHours(), today.getMinutes(), today.getSeconds());\n    var new_date = new Date(date_year, date_month, date_day, date_hour, date_minute, date_second);\n    var seconds = (Math.abs(new_today - new_date) / 1000);\n\n    return seconds + ' seconds ago';\n  }\n\n  formatData(data) {\n    return data.map((data, id) => {\n      return {\n        \"when\": this.getFormatDate(data.timestamp),\n        \"who\": data.author.key.substring(8),\n        \"description\": data.comment.toUpperCase()\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container p-4\">\n        <h1>{this.props.title}</h1>\n        <table className=\"table table-bordered\">\n          <Headings headings={this.props.headings} />\n          <Rows data={this.state.data} />\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;",
    "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport data from './data.json';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App \n      data={data}\n      title='OpenLibrary API'\n      headings={['When', 'Who', 'Description']}\n      users={10}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}
